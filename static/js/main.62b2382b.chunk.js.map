{"version":3,"sources":["components/GridItem.module.css","Grid.module.css","Table.tsx","components/GridItem.tsx","Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ColoredNameCell","cell","item","row","original","className","tier","value","Table","itemsData","useMemo","itemsDataCN","idToImageMap","idImageMap","Map","forEach","set","id","url_image","columns","Header","accessor","Cell","src","alt","localized_name","cellProps","length","map","get","tableInstance","useTable","data","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","getCellProps","GridItem","props","idToItemMap","onClick","selected","highlight","available","hideDetails","style","display","cn","classes","gridItemSelected","gridItemHighlight","gridItemAvailable","itemHideDetail","e","image","localized_name_zh","recipe","index","mappedItem","thumbnailImage","stopPropagation","CONTEXT_MENU_ID","canAssembleItem","availableIds","extendedRecipe","remainingIds","i","idToCheck","indexOf","splice","Grid","ids","emptyMessage","itemMap","itemsGroupByTier","reduce","group","push","useState","selectedItem","setSelectedItem","obtainedItemIds","setObtainedItemIds","showPossibility","setShowPossibility","handleItemClick","disassembledItemIds","all","getOptimizedItemIds","handleContextMenuClick","action","newIds","handleItemChange","visibilityToggleText","obtainedItems","obtainedItem","collect","itemLists","hidden","extensions","includes","contextMenu","contextMenuItem","divider","contextMenuItemDivider","foo","preValue","App","displayMode","theme","darkTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62b2382b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"GridItem_item__34OV5\",\"itemHideDetail\":\"GridItem_itemHideDetail__26b8M\",\"image\":\"GridItem_image__3UBFi\",\"thumbnailImage\":\"GridItem_thumbnailImage__3--zg\",\"gridItemAvailable\":\"GridItem_gridItemAvailable__1Galj\",\"gridItemHighlight\":\"GridItem_gridItemHighlight__1ER5J\",\"gridItemSelected\":\"GridItem_gridItemSelected__3AiYX\",\"tier1\":\"GridItem_tier1__1LzQv\",\"tier2\":\"GridItem_tier2__1VWWR\",\"tier3\":\"GridItem_tier3__3z63T\",\"tier4\":\"GridItem_tier4__1Ty0W\",\"tier5\":\"GridItem_tier5__1qkL0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"obtainedItems\":\"Grid_obtainedItems__13PQg\",\"itemLists\":\"Grid_itemLists__bQTmv\",\"contextMenu\":\"Grid_contextMenu__2GltP\",\"contextMenuItem\":\"Grid_contextMenuItem__2cRjK\",\"contextMenuItemDivider\":\"Grid_contextMenuItemDivider__H_rAO\"};","import { useMemo } from \"react\";\nimport { useTable, useSortBy } from \"react-table\";\n\nimport itemsDataCN from \"./items/items_auto_chess_zh-CN.json\";\n\ninterface DACItem {\n  localized_name: string;\n  localized_name_zh: string;\n  name: string;\n  url_image: string;\n  id: number;\n  tier: number;\n  recipe: Array<number>;\n}\n\nfunction ColoredNameCell(cell: any) {\n  const item = cell.row.original as DACItem;\n  return <span className={`tier${item.tier}`}>{cell.value}</span>;\n}\n\nfunction Table() {\n  const itemsData = useMemo<Array<{ [prop: string]: any }>>(\n    () => itemsDataCN,\n    []\n  );\n  const idToImageMap = useMemo(() => {\n    const idImageMap = new Map();\n    itemsData.forEach((item) => idImageMap.set(item.id, item.url_image));\n    return idImageMap;\n  }, [itemsData]);\n  const columns = useMemo(\n    () => [\n      { Header: \"ID\", accessor: \"id\" },\n      { Header: \"Tier\", accessor: \"tier\" },\n      {\n        Header: \"Name\",\n        accessor: \"localized_name\",\n        Cell: ColoredNameCell,\n      },\n      {\n        Header: \"物品\",\n        accessor: \"localized_name_zh\",\n        Cell: ColoredNameCell,\n      },\n      {\n        Header: \"图片\",\n        accessor: \"url_image\",\n        Cell: ({ row }: any) => {\n          const item = row.original as DACItem;\n          return (\n            <img\n              className=\"image\"\n              src={item.url_image}\n              alt={item.localized_name + \"_image\"}\n            />\n          );\n        },\n      },\n      {\n        Header: \"配方\",\n        accessor: \"recipe\",\n        Cell: (cellProps) => {\n          const { value } = cellProps;\n          return (\n            value &&\n            value.length > 0 && (\n              <>\n                👉\n                {value.map((id: number) => (\n                  <img\n                    className=\"image\"\n                    src={idToImageMap.get(id)}\n                    alt={id + \"_id_image\"}\n                  />\n                ))}\n              </>\n            )\n          );\n        },\n      },\n    ],\n    [idToImageMap]\n  );\n  const tableInstance = useTable({ columns, data: itemsData }, useSortBy);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = tableInstance;\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {\n          // Loop over the header rows\n          headerGroups.map((headerGroup) => (\n            // Apply the header row props\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {\n                // Loop over the headers in each row\n                headerGroup.headers.map((column: any) => (\n                  // Add the sorting props to control sorting. For this example\n                  // we can add them into the header props\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render(\"Header\")}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"\"}\n                    </span>\n                  </th>\n                ))\n              }\n            </tr>\n          ))\n        }\n      </thead>\n      {/* Apply the table body props */}\n      <tbody {...getTableBodyProps()}>\n        {\n          // Loop over the table rows\n          rows.map((row) => {\n            // Prepare the row for display\n            prepareRow(row);\n            return (\n              // Apply the row props\n              <tr {...row.getRowProps()}>\n                {\n                  // Loop over the rows cells\n                  row.cells.map((cell) => {\n                    // Apply the cell props\n                    return (\n                      <td {...cell.getCellProps()}>\n                        {\n                          // Render the cell contents\n                          cell.render(\"Cell\")\n                        }\n                      </td>\n                    );\n                  })\n                }\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import { DOMAttributes, MouseEventHandler } from \"react\";\nimport cn from \"classnames\";\nimport { DACExtendedItem } from \"../items/item\";\n\nimport classes from \"./GridItem.module.css\";\n\nfunction GridItem(\n  props: {\n    item: DACExtendedItem;\n    idToItemMap: Map<number, DACExtendedItem>;\n    onClick?: (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n      item: DACExtendedItem\n    ) => void;\n    selected?: boolean;\n    highlight?: boolean;\n    available?: boolean;\n    hideDetails?: boolean;\n  } & Omit<DOMAttributes<HTMLDivElement>, \"onClick\">\n) {\n  const {\n    item,\n    idToItemMap,\n    onClick,\n    selected,\n    highlight,\n    available,\n    hideDetails,\n  } = props;\n\n  const handleItemClick: MouseEventHandler<HTMLDivElement> = (e) => {\n    onClick?.(e, item);\n  };\n  return (\n    <div\n      style={{ display: \"flex\" }}\n      className={cn(classes.item, {\n        [classes.gridItemSelected]: selected,\n        [classes.gridItemHighlight]: highlight,\n        [classes.gridItemAvailable]: available,\n        [classes.itemHideDetail]: hideDetails,\n      })}\n      onClick={handleItemClick}\n    >\n      <img\n        className={classes.image}\n        src={item.url_image}\n        alt={item.localized_name + \"_image\"}\n      />\n      {!hideDetails && (\n        <div>\n          <div className={classes[`tier${item.tier}`]}>\n            {item.localized_name_zh}\n          </div>\n          <div>\n            {item.recipe.map((id: number, index: number) => {\n              const mappedItem = idToItemMap.get(id) as DACExtendedItem;\n\n              return (\n                <img\n                  className={classes.thumbnailImage}\n                  src={mappedItem.url_image}\n                  alt={mappedItem.localized_name + \"_image\"}\n                  key={`thumbnail-image-${index}`}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onClick?.(e, mappedItem);\n                  }}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default GridItem;\n","import { useMemo, useState } from \"react\";\nimport {\n  ContextMenu,\n  MenuItem,\n  ContextMenuTrigger,\n  MenuItemProps,\n} from \"react-contextmenu\";\n\nimport itemsDataCN from \"./items/items_auto_chess_zh-CN.json\";\nimport { DACExtendedItem, DACItem } from \"./items/item\";\n\nimport GridItem from \"./components/GridItem\";\n\nimport classes from \"./Grid.module.css\";\n\nconst CONTEXT_MENU_ID = \"CONTEXT_MENU_ID\";\n\nconst canAssembleItem = (availableIds: number[], extendedRecipe: number[]) => {\n  if (availableIds.length === 0) return false;\n  const remainingIds = [...availableIds];\n\n  for (let i = 0; i < extendedRecipe.length; i++) {\n    const idToCheck = extendedRecipe[i];\n    const index = remainingIds.indexOf(idToCheck);\n    if (index > -1) {\n      remainingIds.splice(index, 1);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nfunction Grid() {\n  const itemsData = useMemo<Array<DACExtendedItem>>(\n    () =>\n      itemsDataCN.map((i) => ({\n        ...i,\n        extendedRecipe: i.extendedRecipe || [i.id],\n      })),\n    []\n  );\n  const idToItemMap = useMemo<Map<number, DACExtendedItem>>(() => {\n    const itemMap = new Map();\n    itemsData.forEach((item) => itemMap.set(item.id, item));\n    return itemMap;\n  }, [itemsData]);\n\n  const itemsGroupByTier = useMemo(() => {\n    return itemsData.reduce(\n      (group, item) => {\n        group.get(item.tier)?.push(item);\n        return group;\n      },\n      new Map<number, DACExtendedItem[]>([\n        [0, []],\n        [1, []],\n        [2, []],\n        [3, []],\n        [4, []],\n        [5, []],\n      ])\n    );\n  }, [itemsData]);\n\n  const [selectedItem, setSelectedItem] = useState<DACExtendedItem | null>(\n    null\n  );\n  const [obtainedItemIds, setObtainedItemIds] = useState<number[]>([]);\n  const [showPossibility, setShowPossibility] = useState(true);\n  // const [disassembledItemIds, setOptimizedItemIds] = useState<number[]>([]);\n\n  const tierList = [1, 2, 3, 4, 5];\n\n  const handleItemClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    item: DACExtendedItem\n  ) => {\n    if (selectedItem && selectedItem.id === item.id) {\n      setSelectedItem(null);\n    } else {\n      setSelectedItem(item);\n    }\n  };\n\n  const getOptimizedItemIds = (\n    ids: number[],\n    idToItemMap: Map<number, DACExtendedItem>\n  ): number[] => {\n    const disassembledIds = ids.reduce((all: number[], id) => {\n      all.push(...idToItemMap.get(id)!.extendedRecipe);\n      return all;\n    }, []);\n\n    return disassembledIds;\n  };\n\n  const handleItemChange = (action: \"add\" | \"remove\", item: DACItem) => {\n    if (action === \"add\") {\n      setObtainedItemIds([...obtainedItemIds, item.id]);\n    } else if (action === \"remove\") {\n      const index = obtainedItemIds.indexOf(item.id);\n      if (index > -1) {\n        const newIds = [...obtainedItemIds];\n        newIds.splice(index, 1);\n        setObtainedItemIds(newIds);\n      }\n    } else if (action === \"clear\") {\n      setObtainedItemIds([]);\n    }\n  };\n\n  const disassembledItemIds = useMemo(\n    () => getOptimizedItemIds(obtainedItemIds, idToItemMap),\n    [idToItemMap, obtainedItemIds]\n  );\n\n  const renderItemsFromId = (ids: number[], emptyMessage?: string) => {\n    if (ids.length) {\n      return ids.map((id, index) => {\n        const obtainedItem = idToItemMap.get(id)!;\n        return (\n          <ContextMenuTrigger\n            key={`grid-item-trigger-${index}`}\n            id={CONTEXT_MENU_ID}\n            collect={(props) => {\n              return { ...props, item: obtainedItem };\n            }}\n          >\n            <GridItem\n              key={`obtained-item-${index}`}\n              onClick={handleItemClick}\n              item={obtainedItem}\n              idToItemMap={idToItemMap}\n              highlight={obtainedItem.id === selectedItem?.id}\n              hideDetails\n            />\n          </ContextMenuTrigger>\n        );\n      });\n    } else {\n      return emptyMessage;\n    }\n  };\n\n  const handleContextMenuClick: MenuItemProps[\"onClick\"] = (e, data) => {\n    const { action, item } = data as any;\n    handleItemChange(action, item);\n  };\n\n  const togglePossibility = () => {\n    // setSelectedItem(null);\n    setShowPossibility((preValue) => !preValue);\n  };\n\n  const visibilityToggleText = (showPossibility ? \"隐藏\" : \"显示\") + \" 可能性\";\n\n  return (\n    <>\n      <div>\n        <h2>已有物品</h2>\n        <div className={classes.obtainedItems}>\n          {renderItemsFromId(obtainedItemIds, \"右键物品添加，游戏好运 🥳\")}\n        </div>\n      </div>\n      <div className={classes.itemLists}>\n        {tierList.map((tier: number) => (\n          <div key={`tier-${tier}-column`} id={`tier-${tier}-column`}>\n            <h2>{tier}级</h2>\n            {itemsGroupByTier.get(tier)?.map((item, index) => {\n              if (item.hidden) return null;\n              return (\n                <ContextMenuTrigger\n                  key={`grid-item-trigger-${index}`}\n                  id={CONTEXT_MENU_ID}\n                  collect={(props) => {\n                    return { ...props, item };\n                  }}\n                >\n                  <GridItem\n                    key={`grid-item-${index}`}\n                    onClick={handleItemClick}\n                    item={item}\n                    idToItemMap={idToItemMap}\n                    selected={item.id === selectedItem?.id}\n                    highlight={item.extensions.includes(selectedItem?.id || 0)}\n                    available={\n                      showPossibility &&\n                      canAssembleItem(disassembledItemIds, item.extendedRecipe)\n                    }\n                  />\n                </ContextMenuTrigger>\n              );\n            })}\n          </div>\n        ))}\n        <ContextMenu id={CONTEXT_MENU_ID} className={classes.contextMenu}>\n          <MenuItem\n            data={{ action: \"add\" }}\n            onClick={handleContextMenuClick}\n            className={classes.contextMenuItem}\n          >\n            添加\n          </MenuItem>\n          <MenuItem\n            data={{ action: \"remove\" }}\n            onClick={handleContextMenuClick}\n            className={classes.contextMenuItem}\n          >\n            移除\n          </MenuItem>\n          <MenuItem divider className={classes.contextMenuItemDivider} />\n          <MenuItem\n            data={{ action: \"clear\" }}\n            onClick={handleContextMenuClick}\n            className={classes.contextMenuItem}\n          >\n            清空\n          </MenuItem>\n          <MenuItem\n            data={{ foo: \"bar\" }}\n            onClick={togglePossibility}\n            className={classes.contextMenuItem}\n          >\n            {visibilityToggleText}\n          </MenuItem>\n        </ContextMenu>\n      </div>\n    </>\n  );\n}\n\nexport default Grid;\n","import { useState } from \"react\";\nimport { Provider, darkTheme, RadioGroup, Radio } from \"@adobe/react-spectrum\";\n\nimport Table from \"./Table\";\nimport Grid from \"./Grid\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [displayMode, setDisplayMode] = useState(\"Grid\");\n\n  return (\n    <Provider theme={darkTheme}>\n      {/* <RadioGroup\n        label=\"Display mode\"\n        orientation=\"horizontal\"\n        value={displayMode}\n        onChange={setDisplayMode}\n      >\n        <Radio value=\"Table\">Table</Radio>\n        <Radio value=\"Grid\">Grid</Radio>\n      </RadioGroup> */}\n      <div className=\"App\">\n        {/* <h1>Dota Auto Chess Items</h1> */}\n        {displayMode === \"Table\" ? <Table /> : <Grid />}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}