{"version":3,"sources":["components/GridItem.module.css","Table.tsx","components/GridItem.tsx","Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ColoredNameCell","cell","item","row","original","className","tier","value","Table","itemsData","useMemo","itemsDataCN","idToImageMap","idImageMap","Map","forEach","set","id","url_image","columns","Header","accessor","Cell","src","alt","localized_name","cellProps","length","map","get","tableInstance","useTable","data","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","getCellProps","GridItem","props","idToItemMap","onClick","highlight","style","display","cn","classes","gridItemHighlight","e","image","localized_name_zh","recipe","index","mappedItem","thumbnailImage","stopPropagation","getExtendedRecipe","reduce","all","has","push","Grid","itemMap","itemsGroupByTier","group","extendedRecipe","useState","selectedItem","setSelectedItem","handleItemClick","flexDirection","hidden","includes","App","displayMode","setDisplayMode","theme","darkTheme","label","orientation","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8241c0b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"GridItem_item__34OV5\",\"image\":\"GridItem_image__3UBFi\",\"thumbnailImage\":\"GridItem_thumbnailImage__3--zg\",\"gridItemHighlight\":\"GridItem_gridItemHighlight__1ER5J\"};","import { useMemo } from \"react\";\nimport { useTable, useSortBy } from \"react-table\";\n\nimport itemsDataCN from \"./items/items_auto_chess_zh-CN.json\";\n\ninterface DACItem {\n  localized_name: string;\n  localized_name_zh: string;\n  name: string;\n  url_image: string;\n  id: number;\n  tier: number;\n  recipe: Array<number>;\n}\n\nfunction ColoredNameCell(cell: any) {\n  const item = cell.row.original as DACItem;\n  return <span className={`tier${item.tier}`}>{cell.value}</span>;\n}\n\nfunction Table() {\n  const itemsData = useMemo<Array<{ [prop: string]: any }>>(\n    () => itemsDataCN,\n    []\n  );\n  const idToImageMap = useMemo(() => {\n    const idImageMap = new Map();\n    itemsData.forEach((item) => idImageMap.set(item.id, item.url_image));\n    return idImageMap;\n  }, [itemsData]);\n  const columns = useMemo(\n    () => [\n      { Header: \"ID\", accessor: \"id\" },\n      { Header: \"Tier\", accessor: \"tier\" },\n      {\n        Header: \"Name\",\n        accessor: \"localized_name\",\n        Cell: ColoredNameCell,\n      },\n      {\n        Header: \"物品\",\n        accessor: \"localized_name_zh\",\n        Cell: ColoredNameCell,\n      },\n      {\n        Header: \"图片\",\n        accessor: \"url_image\",\n        Cell: ({ row }: any) => {\n          const item = row.original as DACItem;\n          return (\n            <img\n              className=\"image\"\n              src={item.url_image}\n              alt={item.localized_name + \"_image\"}\n            />\n          );\n        },\n      },\n      {\n        Header: \"配方\",\n        accessor: \"recipe\",\n        Cell: (cellProps) => {\n          const { value } = cellProps;\n          return (\n            value &&\n            value.length > 0 && (\n              <>\n                👉\n                {value.map((id: number) => (\n                  <img\n                    className=\"image\"\n                    src={idToImageMap.get(id)}\n                    alt={id + \"_id_image\"}\n                  />\n                ))}\n              </>\n            )\n          );\n        },\n      },\n    ],\n    [idToImageMap]\n  );\n  const tableInstance = useTable({ columns, data: itemsData }, useSortBy);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = tableInstance;\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {\n          // Loop over the header rows\n          headerGroups.map((headerGroup) => (\n            // Apply the header row props\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {\n                // Loop over the headers in each row\n                headerGroup.headers.map((column: any) => (\n                  // Add the sorting props to control sorting. For this example\n                  // we can add them into the header props\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render(\"Header\")}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"\"}\n                    </span>\n                  </th>\n                ))\n              }\n            </tr>\n          ))\n        }\n      </thead>\n      {/* Apply the table body props */}\n      <tbody {...getTableBodyProps()}>\n        {\n          // Loop over the table rows\n          rows.map((row) => {\n            // Prepare the row for display\n            prepareRow(row);\n            return (\n              // Apply the row props\n              <tr {...row.getRowProps()}>\n                {\n                  // Loop over the rows cells\n                  row.cells.map((cell) => {\n                    // Apply the cell props\n                    return (\n                      <td {...cell.getCellProps()}>\n                        {\n                          // Render the cell contents\n                          cell.render(\"Cell\")\n                        }\n                      </td>\n                    );\n                  })\n                }\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import { DOMAttributes, MouseEventHandler } from \"react\";\nimport cn from \"classnames\";\nimport { DACItem } from \"../items/item\";\n\nimport classes from \"./GridItem.module.css\";\n\nfunction GridItem(\n  props: {\n    item: DACItem;\n    idToItemMap: Map<number, DACItem>;\n    onClick?: (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n      item: DACItem\n    ) => void;\n    highlight?: boolean;\n  } & Omit<DOMAttributes<HTMLDivElement>, \"onClick\">\n) {\n  const { item, idToItemMap, onClick, highlight } = props;\n\n  const handleItemClick: MouseEventHandler<HTMLDivElement> = (e) => {\n    onClick?.(e, item);\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\" }}\n      className={cn(classes.item, {\n        [classes.gridItemHighlight]: highlight,\n      })}\n      onClick={handleItemClick}\n    >\n      <img\n        className={classes.image}\n        src={item.url_image}\n        alt={item.localized_name + \"_image\"}\n      />\n      <div>\n        <div>{item.localized_name_zh}</div>\n        <div>\n          {item.recipe.map((id: number, index: number) => {\n            const mappedItem = idToItemMap.get(id) as DACItem;\n\n            return (\n              <img\n                className={classes.thumbnailImage}\n                src={mappedItem.url_image}\n                alt={mappedItem.localized_name + \"_image\"}\n                key={`thumbnail-image-${index}`}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onClick?.(e, mappedItem);\n                }}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default GridItem;\n","import { useMemo, useState } from \"react\";\n\nimport itemsDataCN from \"./items/items_auto_chess_zh-CN.json\";\nimport { DACItem, DACExtendedItem } from \"./items/item\";\n\nimport GridItem from \"./components/GridItem\";\n\nfunction getExtendedRecipe(\n  item: DACItem,\n  idToItemMap: Map<number, DACItem>\n): number[] {\n  return [\n    ...item.recipe,\n    ...item.recipe.reduce((all: number[], id: number) => {\n      if (idToItemMap.has(id)) {\n        all.push(...getExtendedRecipe(idToItemMap.get(id)!, idToItemMap));\n      }\n      return all;\n    }, []),\n  ];\n}\n\nfunction Grid() {\n  const itemsData = useMemo<Array<DACItem>>(() => itemsDataCN, []);\n  const idToItemMap = useMemo<Map<number, DACItem>>(() => {\n    const itemMap = new Map();\n    itemsData.forEach((item) => itemMap.set(item.id, item));\n    return itemMap;\n  }, [itemsData]);\n\n  const itemsGroupByTier = useMemo(() => {\n    return itemsData.reduce(\n      (group, item) => {\n        group.get(item.tier)?.push({\n          ...item,\n          extendedRecipe: getExtendedRecipe(item, idToItemMap),\n        });\n        return group;\n      },\n      new Map<number, DACExtendedItem[]>([\n        [0, []],\n        [1, []],\n        [2, []],\n        [3, []],\n        [4, []],\n        [5, []],\n      ])\n    );\n  }, [idToItemMap, itemsData]);\n\n  const [selectedItem, setSelectedItem] = useState<DACItem | null>(null);\n\n  const tierList = [1, 2, 3, 4, 5];\n\n  const handleItemClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    item: DACItem\n  ) => {\n    if (selectedItem && selectedItem.id === item.id) {\n      setSelectedItem(null);\n    } else {\n      setSelectedItem(item);\n    }\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      {tierList.map((tier: number) => (\n        <div key={`tier-${tier}-column`} id={`tier-${tier}-column`}>\n          <h2>Tier {tier}</h2>\n          {itemsGroupByTier.get(tier)?.map((item, index) => {\n            if (item.hidden) return null;\n            return (\n              <GridItem\n                key={`grid-item-${index}`}\n                onClick={handleItemClick}\n                item={item}\n                idToItemMap={idToItemMap}\n                highlight={\n                  item.id === selectedItem?.id ||\n                  item.extendedRecipe.includes(selectedItem?.id || 0)\n                }\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import { useState } from \"react\";\nimport { Provider, darkTheme, RadioGroup, Radio } from \"@adobe/react-spectrum\";\n\nimport Table from \"./Table\";\nimport Grid from \"./Grid\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [displayMode, setDisplayMode] = useState(\"Grid\");\n\n  return (\n    <Provider theme={darkTheme}>\n      <RadioGroup\n        label=\"Display mode\"\n        orientation=\"horizontal\"\n        value={displayMode}\n        onChange={setDisplayMode}\n      >\n        <Radio value=\"Table\">Table</Radio>\n        <Radio value=\"Grid\">Grid</Radio>\n      </RadioGroup>\n      <div className=\"App\">\n        <h1>Dota Auto Chess Items</h1>\n        {displayMode === \"Table\" ? <Table /> : <Grid />}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}